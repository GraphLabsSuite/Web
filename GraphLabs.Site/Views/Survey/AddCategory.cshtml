@model GraphLabs.Site.Models.TestQuestionListViewModel

@{
    ViewBag.Title = "Добавить тему";
}

<hgroup>
    <h2>@ViewBag.Title</h2>
    @Html.ActionLink("Вернуться к списку вопросов", "Index")
</hgroup>

@using (Html.BeginForm())
{
    <table width="60%" id="tableCategory" class="nakedTable">
        <tr>
            <td width="16%">
                Введите название темы
            </td>
            <td>
                <div class="editor-field editText">
                    @Html.Editor("QuestionSubCategory")
                </div>
            </td>
            <td width="20px">
                <a href='#' id="deleteCategory" title="Нажмите, чтобы удалить тему" style="font-size:2.0em; text-decoration-color:#282828; text-decoration:none; vertical-align:10px">&#10005;</a>
            </td>
        </tr>
    </table><table width="60%" id="tableAddCategory" class="nakedTable">
    <tr>
        <td width="15px">
            <button class="circle-add-button" id="addCategory" value="Добавить новую тему"></button>
        </td>
        <td>
            Добавить новую тему
        </td>
    </tr>
</table><input type="submit" value="Сохранить" id="submitButton" />}
@section Scripts
{
    <script>
        var optionsCount = 0;
                
                /*добавление строки с новой темой*/
                $("#addCategory").click(addCategory);

                function addCategory(e) {
                    e.preventDefault();
                    var newField = this.parentElement.offsetParent.previousElementSibling.cloneNode(true) //клонирую таблицу
                    //переделать надо id аргументы
                    newField.lastChild.firstChild.children[1].children[0].children[0].value = ""; //удаляю содержимое
                    this.parentElement.offsetParent.parentElement.insertBefore(newField, this.parentElement.offsetParent) //прикремпляю перед кнопкой добавления.
                                       
                }

                function deleteOption() {
                  //  console.log($(this))
                    $(this).parent().parent().remove();
                    optionsCount--;
                    for(i = 1; i < optionsCount + 3; ++i)
                    {
                        $("table tr:eq(" + i + ") td input:eq(0)").attr("id","QuestionOptions_" + (i - 1).toString() + "__Key");
                        $("table tr:eq(" + i + ") td input:eq(0)").attr("name","QuestionOptions[" + (i - 1).toString() + "].Key");

                        $("table tr:eq(" + i + ") td input:eq(1)").attr("id","QuestionOptions_" + (i - 1).toString() + "__Value");
                        $("table tr:eq(" + i + ") td input:eq(1)").attr("name","QuestionOptions[" + (i - 1).toString() + "].Value");

                        $("table tr:eq(" + i + ") td input:eq(2)").attr("name","QuestionOptions[" + (i - 1).toString() + "].Value");
                    }
                }

                function deleteQuestion(e) {
                    e.preventDefault();
                    if (countQuestions == 1) { alert("Нельзя удалить последний вопрос!"); return }
                    countQuestions--;
                    var thisTable = this.parentNode.offsetParent;
                    var temp = thisTable.nextSibling;
                    while (temp.id !== 'tableAddOption') {
                        let temp1 = temp.nextSibling
                        temp.remove();
                        temp = temp1;
                    }
                    temp.remove();
                    thisTable.remove()
                }

                function addQuestion(e) {
                    e.preventDefault();
                    countQuestions++;
                    var tableAddQuestion = $(this)[0].parentNode.parentNode.parentNode.parentNode;
                    var submitButton = document.getElementById('submitButton');
                    tableAddQuestion.remove();
                    submitButton.remove();
                    //console.log(document.getElementById('tableQuestion').parentNode.childNodes)
                    var [,a,b,c,] = document.getElementById('tableQuestion').parentNode.childNodes;
                    [a,b,c] = [a,b,c].map(x => x.cloneNode(true));
                    console.log("abc");
                    console.log(a);
                    console.log(b);
                    console.log(c);
                    a.querySelector('input').value = "";
                    var bArray = Array.from(b.childNodes[1].childNodes);
                    console.log("ghbdtn");
                    bArray.slice(2, bArray.length).map(x => x.remove())
                    //b.querySelector('input').value = "";
                    a.querySelector('a').addEventListener('click', deleteQuestion);
                    b.querySelector('a').addEventListener('click', deleteOption);
                    c.querySelector('button').addEventListener('click', createOption)


                    $('#tableQuestion')[0].parentNode.appendChild(a);
                    $('#tableQuestion')[0].parentNode.appendChild(b);
                    $('#tableQuestion')[0].parentNode.appendChild(c);
                    $('#tableQuestion')[0].parentNode.appendChild(tableAddQuestion);
                    $('#tableQuestion')[0].parentNode.appendChild(submitButton);
                }

                /*очистить текст вопроса?*/
                $('#deleteQuestion').click(deleteQuestion);

    </script>
}